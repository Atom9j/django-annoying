{"name":"django-annoying","tagline":"A django application that tries to eliminate annoying things in the Django framework.","body":"Description\r\n-----------\r\n\r\nThis django application eliminates certain annoyances in the Django\r\nframework.\r\n\r\n### Features\r\n\r\n-   render\\_to decorator - Reduce typing in django views.\r\n-   signals decorator - Allow using signals as decorators.\r\n-   ajax\\_request decorator - Returns JsonResponse with dict as content.\r\n-   autostrip decorator - Strip form text fields before validation\r\n-   get\\_object\\_or\\_None function - Similar to get\\_object\\_or\\_404, but returns None if the object is not found.\r\n-   get\\_config function - Get settings from django.conf if exists, return a default value otherwise.\r\n-   AutoOneToOne field - Creates a related object on first call if it doesn't exist yet.\r\n-   JSONField - A field that stores a Python object as JSON and retrieves it as a Python object.\r\n-   HttpResponseReload - Reload and stay on same page from where the request\r\n    was made.\r\n-   StaticServer middleware - Instead of configuring urls.py, just add\r\n    this middleware and it will serve your static files when you are in\r\n    debug mode.\r\n\r\n### Installation instructions\r\n\r\n-   Copy the `annoying` directory to your django project or put in on your PYTHONPATH.\r\n-   You can also run `sudo python setup.py install`, `sudo easy_install django-annoying`,\r\n    or `sudo pip install django-annoying`.\r\n-   Add `\"annoying\"` under INSTALLED\\_APPS in your `settings.py` file.\r\n\r\nExamples\r\n--------\r\n\r\n### render\\_to decorator\r\n\r\n    from annoying.decorators import render_to\r\n\r\n    # 1. Template name in decorator parameters\r\n\r\n    @render_to('template.html')\r\n    def foo(request):\r\n        bar = Bar.object.all()\r\n        return {'bar': bar}\r\n\r\n    # equals to\r\n    def foo(request):\r\n        bar = Bar.object.all()\r\n        return render_to_response('template.html',\r\n                                  {'bar': bar},\r\n                                   context_instance=RequestContext(request))\r\n\r\n\r\n    # 2. Template name as TEMPLATE item value in return dictionary\r\n\r\n    @render_to()\r\n    def foo(request, category):\r\n        template_name = '%s.html' % category\r\n        return {'bar': bar, 'TEMPLATE': template_name}\r\n\r\n    #equals to\r\n    def foo(request, category):\r\n        template_name = '%s.html' % category\r\n        return render_to_response(template_name,\r\n                                  {'bar': bar},\r\n                                  context_instance=RequestContext(request))\r\n\r\n### signals decorator\r\n\r\nNote: Django now [includes this by default](https://docs.djangoproject.com/en/1.5/topics/signals/#connecting-receiver-functions).\r\n\r\n    from annoying.decorators import signals\r\n\r\n    # connect to registered signal\r\n    @signals.post_save(sender=YourModel)\r\n    def sighandler(instance, **kwargs):\r\n        pass\r\n\r\n    # connect to any signal\r\n    signals.register_signal(siginstance, signame) # and then as in example above\r\n\r\n    #or\r\n\r\n    @signals(siginstance, sender=YourModel)\r\n    def sighandler(instance, **kwargs):\r\n        pass\r\n\r\n    #In any case defined function will remain as is, without any changes.\r\n\r\n### ajax\\_request decorator\r\n\r\nThe `ajax_request` decorator converts a `dict` or `list` returned by a view to a JSON or YAML object,\r\ndepending on the HTTP `Accept` header (defaults to JSON, requires `PyYAML` if you want to accept YAML).\r\n\r\n    from annoying.decorators import ajax_request\r\n\r\n    @ajax_request\r\n    def my_view(request):\r\n        news = News.objects.all()\r\n        news_titles = [entry.title for entry in news]\r\n        return {'news_titles': news_titles}\r\n\r\n### autostrip decorator\r\n\r\n    from annoying.decorators import autostrip\r\n\r\n    class PersonForm(forms.Form):\r\n        name = forms.CharField(min_length=2, max_length=10)\r\n        email = forms.EmailField()\r\n\r\n    PersonForm = autostrip(PersonForm)\r\n\r\n    #or in python >= 2.6\r\n\r\n    @autostrip\r\n    class PersonForm(forms.Form):\r\n        name = forms.CharField(min_length=2, max_length=10)\r\n        email = forms.EmailField()\r\n\r\n### get\\_object\\_or\\_None function\r\n\r\n    from annoying.functions import get_object_or_None\r\n\r\n    def get_user(request, user_id):\r\n        user = get_object_or_None(User, id=user_id)\r\n        if not user:\r\n            ...\r\n\r\n### AutoOneToOneField\r\n\r\n    from annoying.fields import AutoOneToOneField\r\n\r\n\r\n    class MyProfile(models.Model):\r\n        user = AutoOneToOneField(User, primary_key=True)\r\n        home_page = models.URLField(max_length=255, blank=True)\r\n        icq = models.IntegerField(blank=True, null=True)\r\n\r\n### JSONField\r\n\r\n    from annoying.fields import JSONField\r\n\r\n\r\n    #model\r\n    class Page(models.Model):\r\n        data = JSONField(blank=True, null=True)\r\n\r\n\r\n\r\n    # view or another place..\r\n    page = Page.objects.get(pk=5)\r\n    page.data = {'title': 'test', 'type': 3}\r\n    page.save()\r\n\r\n### get\\_config function\r\n\r\n    from annoying.functions import get_config\r\n\r\n    ADMIN_EMAIL = get_config('ADMIN_EMAIL', 'default@email.com')\r\n\r\n### StaticServer middleware\r\n\r\nAdd this middleware as first item in MIDDLEWARE\\_CLASSES\r\n\r\nexample:\r\n\r\n    MIDDLEWARE_CLASSES = (\r\n        'annoying.middlewares.StaticServe',\r\n        'django.middleware.common.CommonMiddleware',\r\n        'django.contrib.sessions.middleware.SessionMiddleware',\r\n        'django.middleware.doc.XViewMiddleware',\r\n        'django.contrib.auth.middleware.AuthenticationMiddleware',\r\n    )\r\n\r\nIt will serve static files in debug mode. Also it helps when you debug\r\none of your middleware by responding to static requests before they get\r\nto debugged middleware and will save you from constantly typing \"continue\"\r\nin debugger.\r\n\r\nUsed on [python](http://pyplanet.org) community portal.\r\n","google":"UA-51110-23","note":"Don't delete this file! It's used internally to help with page regeneration."}